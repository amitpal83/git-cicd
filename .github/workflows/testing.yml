name: Automated Testing

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  detect-language:
    name: Detect Project Language
    runs-on: ubuntu-latest
    outputs:
      language: ${{ steps.detect.outputs.language }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect primary language
      id: detect
      run: |
        if [ -f "package.json" ]; then
          echo "language=javascript" >> $GITHUB_OUTPUT
        elif [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
          echo "language=java" >> $GITHUB_OUTPUT
        elif [ -f "requirements.txt" ] || [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
          echo "language=python" >> $GITHUB_OUTPUT
        elif [ -f "Gemfile" ]; then
          echo "language=ruby" >> $GITHUB_OUTPUT
        elif [ -f "go.mod" ]; then
          echo "language=go" >> $GITHUB_OUTPUT
        elif [ -f "Cargo.toml" ]; then
          echo "language=rust" >> $GITHUB_OUTPUT
        elif [ -f "composer.json" ]; then
          echo "language=php" >> $GITHUB_OUTPUT
        else
          echo "language=generic" >> $GITHUB_OUTPUT
        fi

  test-javascript:
    name: Test JavaScript/Node.js
    runs-on: ubuntu-latest
    needs: detect-language
    if: needs.detect-language.outputs.language == 'javascript'
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: |
        if npm run lint --if-present; then
          echo "Linting passed"
        else
          echo "No lint script found or linting failed"
        fi
        
    - name: Run tests
      run: |
        if npm run test --if-present; then
          echo "Tests passed"
        else
          echo "No test script found"
        fi
        
    - name: Build project
      run: |
        if npm run build --if-present; then
          echo "Build successful"
        else
          echo "No build script found"
        fi

  test-java:
    name: Test Java
    runs-on: ubuntu-latest
    needs: detect-language
    if: needs.detect-language.outputs.language == 'java'
    
    strategy:
      matrix:
        java-version: [11, 17, 21]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java ${{ matrix.java-version }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Maven tests
      if: hashFiles('**/pom.xml') != ''
      run: mvn clean test
      
    - name: Run Gradle tests
      if: hashFiles('**/build.gradle') != ''
      run: ./gradlew test

  test-python:
    name: Test Python
    runs-on: ubuntu-latest
    needs: detect-language
    if: needs.detect-language.outputs.language == 'python'
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        
    - name: Run linting with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run tests with pytest
      run: |
        pip install pytest
        pytest

  test-generic:
    name: Generic Testing
    runs-on: ubuntu-latest
    needs: detect-language
    if: needs.detect-language.outputs.language == 'generic'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for common test patterns
      run: |
        echo "Checking for common test patterns..."
        find . -name "*test*" -type f | head -10
        find . -name "*spec*" -type f | head -10
        
    - name: Run shell script tests if present
      run: |
        if [ -f "test.sh" ]; then
          chmod +x test.sh
          ./test.sh
        elif [ -f "tests.sh" ]; then
          chmod +x tests.sh
          ./tests.sh
        else
          echo "No shell test scripts found"
        fi