name: Continuous Integration and Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image (if Dockerfile exists)
      if: hashFiles('**/Dockerfile') != ''
      run: |
        docker build -t test-image .
        
    - name: Test Docker image
      if: hashFiles('**/Dockerfile') != ''
      run: |
        docker run --rm test-image echo "Docker image test successful"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/setup@master
      
    - name: Snyk test
      run: snyk test --all-projects
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true
      
    - name: Run Bandit security linter for Python
      if: hashFiles('**/*.py') != ''
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Upload security results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          .snyk

  build-matrix:
    name: Build Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup environment
      run: |
        echo "Building on ${{ matrix.os }}"
        
    - name: Cross-platform compatibility check
      run: |
        if [ -f "package.json" ]; then
          echo "Node.js project detected"
        elif [ -f "pom.xml" ]; then
          echo "Java Maven project detected"
        elif [ -f "requirements.txt" ]; then
          echo "Python project detected"
        else
          echo "Generic project"
        fi
      shell: bash

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "This would typically involve:"
        echo "- Building production artifacts"
        echo "- Uploading to staging server"
        echo "- Running smoke tests"
        echo "- Notifying team of deployment"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-audit]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ steps.version.outputs.version }} to production..."
        echo "This would typically involve:"
        echo "- Building production artifacts"
        echo "- Creating release notes"
        echo "- Deploying to production servers"
        echo "- Running health checks"
        echo "- Notifying stakeholders"
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        draft: false
        prerelease: false

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, security-audit]
    if: always()
    
    steps:
    - name: Notify team
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ] && [ "${{ needs.security-audit.result }}" == "success" ]; then
          echo "✅ All checks passed! Ready for review/deployment."
        else
          echo "❌ Some checks failed. Please review the results."
        fi